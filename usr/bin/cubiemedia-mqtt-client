#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import logging
import signal
import time
import json
import sys
import paho.mqtt.client as mqtt
from socket import error as socket_error

sys.path.append('/usr/lib/cubiemedia/')
sys.path.append('../lib/cubiemedia/')

from cubiemedia_common import CUBIE_IO, CUBIE_ENOCEAN, CUBIE_RELAY # noqa
from cubiemedia_common import CUBIE_RESET, CUBIE_ANNOUNCE, CUBIE_TOPIC_COMMAND, QOS, CUBIE_IO, CUBIE_ENOCEAN, CUBIE_RELAY # noqa
from cubiemedia_common import get_ip_address # noqa

logging.basicConfig(filename='./cubiemedia_mqtt_client.log', level=logging.INFO, format='%(asctime)s %(message)s')


def on_message(client, userdata, msg):
    # print(msg.payload)
    if msg.payload.decode('UTF-8') == CUBIE_ANNOUNCE:
        try:
            print("... search request: announcing devices")
            logging.info("... search request: announcing devices")
            system.announce()
        except Exception as error:
            print(error)
    elif msg.payload.decode('UTF-8') == CUBIE_RESET:
        print("... reset request: clear device list")
        logging.info("... reset request: clear device list")
        system.reset()
    else:
        # print("... received data: format to json[%s]" % msg.payload)
        try:
            if msg.topic == CUBIE_TOPIC_COMMAND:
                message_data = json.loads(msg.payload.decode())
                if "mode" in message_data:
                    message_mode = message_data["mode"]
                    if message_mode == "update":
                        if "device" in message_data:
                            new_device = message_data["device"]
                            system.save(new_device)
                        elif "learn_mode" in message_data:
                            system.set_learn_mode(message_data['learn_mode'])
                        else:
                            print("WARNING: no data given [device]")
                    elif message_mode == "delete":
                        if "device" in message_data:
                            new_device = message_data["device"]
                            system.delete(new_device)
                        else:
                            print("WARNING: no data given [device]")
                    elif message_mode == 'values':
                        print("... %s: %s" % (msg.topic, str(msg.payload)))
                        logging.info("... send data with [%s]: %s" % (msg.topic, str(msg.payload)))
                        system.send(message_data)
                    else:
                        print("WARNING: unknown mode [%s]" % message_mode)
                else:
                    print("WARNING: no mode given, doing nothing")
            else:
                if msg.topic.endswith("/command"):
                    topic_array = msg.topic.split("/")
                    if len(topic_array) > 3:
                        message_data = {'ip': topic_array[1].replace("_", "."), 'id': topic_array[2],
                                        'state': msg.payload}
                        system.send(message_data)
                else:
                    print("... ... unknown topic [%s]" % msg.topic)
        except json.JSONDecodeError:
            print("... could not decode message[%s]" % msg.payload.decode())
            logging.warning("... could not decode message[%s]" % msg.payload.decode())


def on_connect(client, userdata, flags, rc):
    print("... connected to Service [%s]" % client._host)
    logging.info("... connected to Service [%s]" % client._host)
    if rc == 0:
        print("... ... subscribe to channel [%s]" % CUBIE_TOPIC_COMMAND)
        logging.info("... ... subscribe to channel [%s]" % CUBIE_TOPIC_COMMAND)
        client.subscribe(CUBIE_TOPIC_COMMAND, QOS)
        system.announce()
    else:
        print("... bad connection please check login data")
        logging.info("... bad connection please check login data")


def on_disconnect(client, userdata, rc):
    if rc == 0:
        print("... ... disconnected from Service [%s] with result [%s]" % (client._host, rc))
        logging.debug("... ...disconnected from Service [%s] with result [%s]" % (client._host, rc))
    else:
        print("... ... lost connection to Service [%s] with result [%s]" % (client._host, rc))
        logging.debug("... ... lost connection to Service [%s] with result [%s]" % (client._host, rc))


def exit_gracefully(self, *args):
    print("... shutdown process")
    logging.info("... shutdown process")
    system.RUN = False

    system.shutdown()
    print('... stopping MQTT Client...')
    logging.info('... stopping MQTT Client...')
    mqtt_client.disconnect()

# Setup ###


if len(sys.argv) < 2 or (sys.argv[1] != CUBIE_IO and sys.argv[1] != CUBIE_ENOCEAN and sys.argv[1] != CUBIE_RELAY):
    print("ERROR: Please give Mode [%s,%s,%s] for script" % (CUBIE_IO, CUBIE_ENOCEAN, CUBIE_RELAY))
    sys.exit(17)

mode = sys.argv[1]

print("Starting Cubie MQTT Client with mode [%s]" % mode)
logging.info("Starting Cubie MQTT Client with mode [%s]" % mode)

IP_ADDRESS = get_ip_address()
while IP_ADDRESS is None or '169.' in IP_ADDRESS:
    logging.warning("... found bad ip [%s], search again..." % IP_ADDRESS)
    time.sleep(3)
    IP_ADDRESS = get_ip_address()

if mode == CUBIE_IO:
    import cubiemedia_io as system
elif mode == CUBIE_ENOCEAN:
    import cubiemedia_enocean as system
elif mode == CUBIE_RELAY:
    import cubiemedia_relay as system

clientId = IP_ADDRESS + "-" + mode + "-client"
mqtt_client = mqtt.Client(client_id=clientId, clean_session=True, userdata=None, transport="tcp")
MQTT_SERVER, MQTT_USER, MQTT_PASSWORD = system.init(mqtt_client)

print("... connecting to Service [%s] as client [%s]" % (MQTT_SERVER, clientId))
logging.info("... connecting to Service [%s] as client [%s]" % (MQTT_SERVER, clientId))
mqtt_client.username_pw_set(username=MQTT_USER, password=MQTT_PASSWORD)
mqtt_client.on_connect = on_connect
mqtt_client.on_disconnect = on_disconnect
mqtt_client.on_message = on_message

try:
    mqtt_client.connect(MQTT_SERVER, 1883, 60)
    mqtt_client.loop_start()
except socket_error:
    print("... could not connect to Service %s" % mqtt_client._host)
    logging.warning("... could not connect to Service %s" % mqtt_client._host)
    system.shutdown()
    sys.exit(1)

# End of setup ###

signal.signal(signal.SIGINT, exit_gracefully)
signal.signal(signal.SIGTERM, exit_gracefully)

system.RUN = True
while system.RUN:
    data = system.update()

    if 'devices' in data and len(data['devices']) > 0:
        devices = data['devices']
        for device in devices:
            system.action(device)

    time.sleep(.2)

print('... all done, exit program')
sys.exit()

